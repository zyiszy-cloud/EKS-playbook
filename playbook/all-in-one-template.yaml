---
# 功能说明：集群状态采集, 统计集群中Pod和Node的状态
# 参数说明:
#   cluster-status-collect模版参数说明:
#     1. image: 工具镜像, 用于采集集群状态, tke-chaos/cmd/status.go
#     2. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: cluster-status-collect-template
spec:
  arguments:
    parameters:
    # cluster-status-collect 参数
    - name: image
      value: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
  entrypoint: cluster-status-collect
  templates:
  - name: cluster-status-collect
    inputs:
      parameters:
      - name: image
        description: "工具镜像, 用于采集集群状态"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: internal-cluster-status-collect
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
        template: internal-cluster-status-collect
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
      - name: external-cluster-status-collect
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-cluster-status-collect
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"
    outputs:
      parameters:
      - name: result
        valueFrom:
          expression: "'{{inputs.parameters.kubeconfig-secret-name}}' == '' ? tasks['internal-cluster-status-collect'].outputs.result : tasks['external-cluster-status-collect'].outputs.result"

  - name: internal-cluster-status-collect
    inputs:
      parameters:
      - name: image
        description: "工具镜像, 用于采集集群状态"
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - status

  - name: external-cluster-status-collect
    inputs:
      parameters:
      - name: image
        description: "工具镜像, 用于采集集群状态"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - status
      - --kubeconfig=/.kube/config
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

---
# 功能说明：执行kubectl命令模版, 用于对集群执行kubectl命令操作
# 参数说明:
#   kubectl-mutating-cmd模版参数说明:
#     1. action: 执行的kubectl命令, 支持create/apply/delete
#     2. manifest: 执行的kubectl命令的yaml配置
#     3. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
#   kubectl-cmd模版参数说明:
#     1. cmd: 执行的kubectl命令
#     2. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
#   kubectl-script模版参数说明:
#     1. source: 执行的kubectl命令的yaml配置
#     2. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: kubectl-cmd
spec:
  entrypoint: kubectl-cmd
  templates:
  - name: kubectl-mutating-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: action
        description: "执行的kubectl命令, 支持create/apply/delete"
      - name: manifest
        description: "执行的kubectl命令的yaml配置"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: internal-kubectl-mutating-cmd
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: action
            value: "{{inputs.parameters.action}}"
          - name: manifest
            value: "{{inputs.parameters.manifest}}"
        template: internal-kubectl-mutating-cmd
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
      - name: external-kubectl-mutating-cmd
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: action
            value: "{{inputs.parameters.action}}"
          - name: manifest
            value: "{{inputs.parameters.manifest}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-kubectl-mutating-cmd
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"
    outputs:
      parameters:
      - name: result
        valueFrom:
          expression: "'{{inputs.parameters.kubeconfig-secret-name}}' == '' ? tasks['internal-kubectl-mutating-cmd'].outputs.result : tasks['external-kubectl-mutating-cmd'].outputs.result"

  - name: external-kubectl-mutating-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: action
      - name: manifest
      - name: kubeconfig-secret-name
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        #!/bin/bash
        cat <<EOF | kubectl {{inputs.parameters.action}} -f -
        {{inputs.parameters.manifest}}
        EOF
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

  - name: internal-kubectl-mutating-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: action
      - name: manifest
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        #!/bin/bash
        cat <<EOF | kubectl {{inputs.parameters.action}} -f -
        {{inputs.parameters.manifest}}
        EOF

  - name: kubectl-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: cmd
        description: "执行的kubectl命令, 如: get pods -n default"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: internal-kubectl-cmd
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: cmd
            value: "{{inputs.parameters.cmd}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: internal-kubectl-cmd
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
      - name: external-kubectl-cmd
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: cmd
            value: "{{inputs.parameters.cmd}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-kubectl-cmd
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"
    outputs:
      parameters:
      - name: result
        valueFrom:
          expression: "'{{inputs.parameters.kubeconfig-secret-name}}' == '' ? tasks['internal-kubectl-cmd'].outputs.result : tasks['external-kubectl-cmd'].outputs.result"

  - name: internal-kubectl-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: cmd
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        #!/bin/bash
        kubectl {{inputs.parameters.cmd}}

  - name: external-kubectl-cmd
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: cmd
      - name: kubeconfig-secret-name
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        #!/bin/bash
        kubectl {{inputs.parameters.cmd}}
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

  - name: kubectl-script
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: source
        description: "kubectl脚本"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: internal-kubectl-script
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: source
            value: "{{inputs.parameters.source}}"
        template: internal-kubectl-script
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
      - name: external-kubectl-script
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: source
            value: "{{inputs.parameters.source}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-kubectl-script
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"
    outputs:
      parameters:
      - name: result
        valueFrom:
          expression: "'{{inputs.parameters.kubeconfig-secret-name}}' == '' ? tasks['internal-kubectl-script'].outputs.result : tasks['external-kubectl-script'].outputs.result"

  - name: internal-kubectl-script
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: source
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        {{inputs.parameters.source}}

  - name: external-kubectl-script
    inputs:
      parameters:
      - name: image
        default: "bitnami/kubectl:1.32.4"
      - name: source
      - name: kubeconfig-secret-name
    script:
      image: "{{inputs.parameters.image}}"
      command: [bash]
      source: |
        {{inputs.parameters.source}}
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

---
# Description: Template for interacting with Tencent Cloud TKE API
# API Documentation: https://cloud.tencent.com/document/api
#
# Parameters:
#   args: JSON format parameters for TKE API call. Required fields:
#     - secretId: Tencent Cloud API secret ID (Manage at: https://console.cloud.tencent.com/cam/capi)
#     - secretKey: Tencent Cloud API secret key
#     - region: Cloud region (e.g. ap-guangzhou)
#     - clusterId: TKE cluster ID
#     - component: Kubernetes component name (e.g. kube-apiserver, kube-controller-manager, kube-scheduler)
#     - action: API action name (e.g. describe, shutdown, restore)
#
# Example args value:
# {
#   "secretId": "<SECRET_ID>",
#   "secretKey": "<SECRET_KEY>",
#   "region": "ap-qingyuan",
#   "clusterId": "cls-12345678",
#   "component": "kube-apiserver",
#   "action": "describe"
# }
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: tke-master-manager-template
spec:
  entrypoint: caller
  templates:
  - name: caller
    inputs:
      parameters:
      - name: image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
      - name: args
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - mastermanager
      - --provider=tke
      - --args={{inputs.parameters.args}}
    outputs:
      parameters:
      - name: response
        valueFrom:
          default: "null"
          path: /tmp/response.txt

---
# 功能说明: 企微群通知模版
# generate-apiserver-overload-test-notify-message: 生成Markdown消息
# generate-apiserver-overload-test-message-then-notify: 生成Markdown消息并发送到企微群
# notify: 发送Markdown消息到企微群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: wechat-notify-template
spec:
  entrypoint: notify
  templates:
  - name: generate-apiserver-overload-test-message-then-notify
    inputs:
      parameters:
      # generate-message参数
      - name: stage
        dscription: "阶段"
      - name: cluster-id
        dscription: "集群ID"
      - name: chaos-type
        dscription: "故障类型"
      - name: concurrency
        default: "N/A"
        dscription: "并发执行压测的Pod数"
      - name: QPS
        dscription: "单个压测Pod每秒执行list的QPS"
        default: "N/A"
      - name: total-duration
        default: "N/A"
        dscription: "持续时间"
      - name: cluster-status
        default: "N/A"
        dscription: "集群状态"
      - name: controll-plane-metrics
        default: "N/A"
        dscription: "控制面metrics"
      - name: check-result
        default: "N/A"
        dscription: "校验结果"
      - name: details-message
        default: "N/A"
        dscription: "详细信息"
      # notify参数
      - name: webhook-url
    steps:
    - - name: generate-apiserver-overload-test-notify-message
        template: generate-apiserver-overload-test-notify-message
        arguments:
          parameters:
          - name: stage
            value: "{{inputs.parameters.stage}}"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: concurrency
            value: "{{inputs.parameters.concurrency}}"
          - name: QPS
            value: "{{inputs.parameters.QPS}}"
          - name: total-duration
            value: "{{inputs.parameters.total-duration}}"
          - name: cluster-status
            value: "{{inputs.parameters.cluster-status}}"
          - name: controll-plane-metrics
            value: "{{inputs.parameters.controll-plane-metrics}}"
          - name: check-result
            value: "{{inputs.parameters.check-result}}"
          - name: details-message
            value: "{{inputs.parameters.details-message}}"
    - - name: notify-apiserver-overload-test-to-wechat
        template: notify
        arguments:
          parameters:
          - name: message
            value: |
              {
                "msgtype": "markdown",
                "markdown": {
                  "content": "{{steps.generate-apiserver-overload-test-notify-message.outputs.result}}"
                }
              }
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"

  - name: generate-apiserver-overload-test-notify-message
    inputs:
      parameters:
      - name: stage
        description: "阶段"
      - name: cluster-id
        description: "集群ID"
      - name: chaos-type
        description: "故障类型"
      - name: concurrency
        default: "N/A"
        description: "并发执行压测的Pod数"
      - name: QPS
        default: "N/A"
        description: "单个压测Pod每秒执行list的QPS"
      - name: total-duration
        default: "N/A"
        description: "压测持续时间"
      - name: cluster-status
        default: "N/A"
        description: "集群状态"
      - name: controll-plane-metrics
        default: "N/A"
        description: "控制面metrics"
      - name: check-result
        default: "N/A"
        description: "前置检测结果"
      - name: details-message
        default: "N/A"
        description: "详细信息"
    script:
      image: busybox:1.37.0
      command: [sh]
      source: |
        cat <<EOF
        ### 故障演练通知
        **阶段**: {{inputs.parameters.stage}}
        **集群ID**: {{inputs.parameters.cluster-id}}
        **故障类型**: {{inputs.parameters.chaos-type}}
        **并发数**: {{inputs.parameters.concurrency}}
        **QPS**: {{inputs.parameters.QPS}}
        **持续时间**: {{inputs.parameters.total-duration}}
        **集群状态**: {{inputs.parameters.cluster-status}}
        **控制面metrics**: {{inputs.parameters.controll-plane-metrics}}
        **校验结果**: {{inputs.parameters.check-result}}
        **详细信息**: {{inputs.parameters.details-message}}
        **时间**: $(date +'%Y-%m-%d %H:%M:%S')
        EOF

  - name: notify
    retryStrategy:
      limit: "3"
    inputs:
      parameters:
      - name: message
        description: "The message to send to the webhook"
      - name: webhook-url
        description: "The webhook URL to send the message to"
    http:
      method: POST
      url: "{{inputs.parameters.webhook-url}}"
      body: "{{inputs.parameters.message}}"
      successCondition: "response.statusCode == 200"
      headers:
      - name: Content-Type
        value: "application/json"

---
# 功能说明：
#   1. 演练前检查集群健康状态, 如果集群不健康, 则不执行演练;
#      校验规则: Nodes健康率>=nodes-health-ratio && Pods的健康率>=pods-health-ratio 则允许执行演练
#   2. 演练前检查被演练集群中是否存在{check-configmap-namespace}/{check-configmap-name} configmap, 如果不存在, 则不执行演练;
# 参数说明:
#   precheck模版参数说明:
#     1. image: precheck工具镜像, 用于校验集群健康状态, tke-chaos/cmd/check.go
#     2. check-configmap-name: 指定被演练集群中要检查的configmap名称
#     3. check-configmap-namespace: 指定被演练集群中要检查的configmap所在的namespace
#     4. pods-health-ratio: 指定被演练集群中pod的健康率, 如果pod的健康率小于pod-health-ratio, 则不执行演练
#     5. nodes-health-ratio: 指定被演练集群中node的健康率, 如果node的健康率小于node-health-ratio, 则不执行演练
#     6. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: precheck-template
spec:
  entrypoint: precheck
  templates:
  - name: precheck
    inputs:
      parameters:
      - name: image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "precheck工具镜像, 用于校验集群健康状态"
      - name: check-configmap-name
        default: "tke-chaos-precheck-resource"
        description: "指定被演练集群中要检查的configmap名称"
      - name: check-configmap-namespace
        default: "tke-chaos-test"
        description: "指定被演练集群中要检查的configmap所在的namespace"
      - name: pods-health-ratio
        default: "0.9"
        description: "指定被演练集群中pod的健康率, 如果pod的健康率小于pod-health-ratio, 则不执行演练"
      - name: nodes-health-ratio
        default: "0.9"
        description: "指定被演练集群中node的健康率, 如果node的健康率小于node-health-ratio, 则不执行演练"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: internal-precheck
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: check-configmap-name
            value: "{{inputs.parameters.check-configmap-name}}"
          - name: check-configmap-namespace
            value: "{{inputs.parameters.check-configmap-namespace}}"
          - name: pods-health-ratio
            value: "{{inputs.parameters.pods-health-ratio}}"
          - name: nodes-health-ratio
            value: "{{inputs.parameters.nodes-health-ratio}}"
        template: internal-precheck
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
      - name: external-precheck
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: check-configmap-name
            value: "{{inputs.parameters.check-configmap-name}}"
          - name: check-configmap-namespace
            value: "{{inputs.parameters.check-configmap-namespace}}"
          - name: pods-health-ratio
            value: "{{inputs.parameters.pods-health-ratio}}"
          - name: nodes-health-ratio
            value: "{{inputs.parameters.nodes-health-ratio}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-precheck
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"
    outputs:
      parameters:
      - name: result
        valueFrom:
          expression: "'{{inputs.parameters.kubeconfig-secret-name}}' == '' ? tasks['internal-precheck'].outputs.result : tasks['external-precheck'].outputs.result"

  - name: internal-precheck
    inputs:
      parameters:
      - name: image
      - name: check-configmap-name
      - name: check-configmap-namespace
      - name: pods-health-ratio
      - name: nodes-health-ratio
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - check
      - --configmap={{inputs.parameters.check-configmap-name}}
      - --namespace={{inputs.parameters.check-configmap-namespace}}
      - --pods-health-ratio={{inputs.parameters.pods-health-ratio}}
      - --nodes-health-ratio={{inputs.parameters.nodes-health-ratio}}

  - name: external-precheck
    inputs:
      parameters:
      - name: image
      - name: kubeconfig-secret-name
      - name: check-configmap-name
      - name: check-configmap-namespace
      - name: pods-health-ratio
      - name: nodes-health-ratio
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - check
      - --kubeconfig=/.kube/config
      - --configmap={{inputs.parameters.check-configmap-name}}
      - --namespace={{inputs.parameters.check-configmap-namespace}}
      - --pods-health-ratio={{inputs.parameters.pods-health-ratio}}
      - --nodes-health-ratio={{inputs.parameters.nodes-health-ratio}}
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

---
# 功能说明：创建或删除etcd过载保护的kube-system/tke-request-match-config ConfigMap, 详细见: 
# https://doc.weixin.qq.com/doc/w3_ACYAlwbdAFwFuPA3vx1TFyen963Cr?scode=AJEAIQdfAAoqbdLlUsAVoAPgaKAKk
# 参数说明:
#   etcd-protect-cm-orchestrate参数说明
#     1. action: 操作类型，apply/delete
#     2. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
#     3. manifest: 过载保护的ConfigMap的yaml内容, 使用默认值
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: etcd-protect-cm-orchestrate
spec:
  arguments:
    parameters:
    - name: user-agent
      value: "kubestress"
    # etcd-protect-cm-orchestrate参数
    - name: action
      value: "apply"
    - name: manifest
      value: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: tke-request-match-config
          namespace: kube-system
        data:
            readcache: '{"rules":[{"resource":"pods","userAgents":["{{workflow.parameters.user-agent}}"]},{"resource":"configmaps","userAgents":["{{workflow.parameters.user-agent}}"]}]}'
  entrypoint: etcd-protect-cm-orchestrate
  templates:
  - name: etcd-protect-cm-orchestrate
    inputs:
      parameters:
      - name: action  # 操作类型，create/apply/delete
        default: "apply"
        description: "操作类型, create/apply/delete"
      - name: manifest  # 操作的yaml配置
        description: "操作的yaml配置"
      - name: kubeconfig-secret-name   # 操作的集群kubeconfig secret名称, 当为空时, 则为incluster
        description: "操作的集群kubeconfig secret名称, 当为空时, 则为incluster"
    dag:
      tasks:
      - name: kubectl-cmd
        arguments:
          parameters:
          - name: action
            value: "{{inputs.parameters.action}}"
          - name: manifest
            value: "{{inputs.parameters.manifest}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: kubectl-cmd
          template: kubectl-mutating-cmd
          clusterScope: true

# 功能说明: apiserver/etcd 高负载演练
---
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: apiserver-load-test-template
spec:
  entrypoint: main
  templates:
  - name: main
    inputs:
      parameters:
      # 全局参数
      - name: cluster-id
        default: "未知"
        description: "集群ID"
      - name: enable-apf
        default: "false"
        description: "是否启用apf限流"
      - name: enable-etcd-protect
        default: "false"
        description: "是否启用etcd过载保护"
      - name: enable-resource-create
        default: "false"
        description: "演练开始前是否创建资源, 模拟资源规模"
      - name: webhook-url
        default: ""
        description: "企业微信群webhook通知地址"
      - name: kubeconfig-secret-name
        description: "测试remote cluster填该字段, 如未填些, 则测试当前集群(选填)"
      - name: chaos-type
        default: "演练类型"

      # precheck参数
      - name: precheck-cluster-image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "前置检查工具镜像"
      - name: check-configmap-name
        default: "tke-chaos-precheck-resource"
        description: "前置检查检测的configmap名称"
      - name: check-configmap-namespace
        default: "tke-chaos-test"
        description: "前置检查检测的configmap命名空间"
      - name: pods-health-ratio
        default: "0.9"
        description: "检测集群pods健康率, 0.9表示90%, 当pods健康率小于该值时, 将不允许测试"
      - name: nodes-health-ratio
        default: "0.9"
        description: "集群节点健康率, 0.9表示90%, 当节点健康率小于该值时, 将不允许测试"

      # 资源创建参数
      - name: resource-create-image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "资源创建工具镜像"
      - name: resource-create-namespace
        default: "tke-chaos-test"
        description: "创建资源所在的命名空间"
      - name: resource-create-object-type
        default: "pods"
        description: "创建资源类型,支持pods/configmaps"
      - name: resource-create-object-size-bytes
        default: "10000"
        description: "创建资源大小, 单位字节"
      - name: resource-create-object-count
        default: "10"
        description: "创建资源数量"
      - name: resource-create-qps
        default: "10"
        description: "资源创建的QPS"

      # 集群状态采集参数
      - name: cluster-status-image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "集群状态检查工具镜像"

      # 压测参数
      - name: inject-stress-image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "故障注入工具镜像"
      - name: inject-stress-list-namespace
        default: ""
        description: "list请求的namespace, 如果为空, 则默认不限制namespace"
      - name: inject-stress-list-object-type
        default: "pods"
        description: "list的资源, 支持pods, configmaps"
      - name: inject-stress-list-page-size
        default: "0"
        description: "list每页大小, 默认值为0不分页"
      - name: inject-stress-list-num-clients
        default: "20"
        description: "list的客户端数, 默认值为20"
      - name: from-cache
        default: "true"
        description: "压测工具是否从kube-apiserver缓存中获取数据, 默认从kube-apiserver缓存中读取; 如果为false, 则请求将穿透到etcd"
      - name: inject-stress-user-agent
        default: "kubestress"
        description: "发压端UserAgent, 如: kubestress/1.0.0"
      - name: inject-stress-concurrency
        default: "1"
        description: "并发执行压测的Pod数"
      - name: inject-stress-list-qps
        default: "100"
        description: "单个压测Pod每秒执行list的QPS"
      - name: inject-stress-total-duration
        default: "30s"
        description: "压测持续时间"
    steps:
    - - name: notify-start-chaos  # 通知: 开始故障演练
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "准备演练"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: cluster-status-collect-start  # 演练开始前统计集群状态
        templateRef:
          name: cluster-status-collect-template
          template: cluster-status-collect
          clusterScope: true
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.cluster-status-image}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: notify-cluster-status-start  # 通知: 演练开始前的集群状态
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "准备演练"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: cluster-status
            value: "{{steps.cluster-status-collect-start.outputs.parameters.result}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: notify-start-precheck  # 通知: 开始做演练前校验
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "开始演练校验"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: precheck  # 校验集群是否可以执行故障演练
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.precheck-cluster-image}}"
          - name: check-configmap-name
            value: "{{inputs.parameters.check-configmap-name}}"
          - name: check-configmap-namespace
            value: "{{inputs.parameters.check-configmap-namespace}}"
          - name: pods-health-ratio
            value: "{{inputs.parameters.pods-health-ratio}}"
          - name: nodes-health-ratio
            value: "{{inputs.parameters.nodes-health-ratio}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: precheck-template
          template: precheck
          clusterScope: true

    - - name: notify-precheck-result  # 通知: 检验结果
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "演练校验完成"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
          - name: check-result
            value: "{{steps.precheck.status}}"
          - name: details-message
            value: "{{steps.precheck.outputs.parameters.result}}"
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: create-resource # 创建资源, 模拟现网环境资源规模
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.resource-create-image}}"
          - name: namespace
            value: "{{inputs.parameters.resource-create-namespace}}"
          - name: object-type
            value: "{{inputs.parameters.resource-create-object-type}}"
          - name: object-size-bytes
            value: "{{inputs.parameters.resource-create-object-size-bytes}}"
          - name: object-count
            value: "{{inputs.parameters.resource-create-object-count}}"
          - name: num-clients
            value: "20"
          - name: qps
            value: "{{inputs.parameters.resource-create-qps}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: resource-archestrate
          template: resource-create
          clusterScope: true
        when: "{{steps.precheck.status}} == Succeeded && '{{inputs.parameters.enable-resource-create}}' == 'true'"

    - - name: notify-inject-stress  # 通知: 开始注入故障
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "开始故障注入"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
          - name: concurrency
            value: "{{inputs.parameters.inject-stress-concurrency}}"
          - name: QPS
            value: "{{inputs.parameters.inject-stress-list-qps}}"
          - name: total-duration
            value: "{{inputs.parameters.inject-stress-total-duration}}"
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        when: "{{steps.precheck.status}} == Succeeded && '{{inputs.parameters.webhook-url}}' != ''"

    - - name: inject-stress  # 注入故障
        withSequence:
          count: "{{inputs.parameters.inject-stress-concurrency}}"
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.inject-stress-image}}"
          - name: namespace
            value: "{{inputs.parameters.inject-stress-list-namespace}}"
          - name: object-type
            value: "{{inputs.parameters.inject-stress-list-object-type}}"
          - name: page-size
            value: "{{inputs.parameters.inject-stress-list-page-size}}"
          - name: num-clients
            value: "{{inputs.parameters.inject-stress-list-num-clients}}"
          - name: qps
            value: "{{inputs.parameters.inject-stress-list-qps}}"
          - name: total-duration
            value: "{{inputs.parameters.inject-stress-total-duration}}"
          - name: from-cache
            value: "{{inputs.parameters.from-cache}}"
          - name: user-agent
            value: "{{inputs.parameters.inject-stress-user-agent}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: inject-stress-template
          template: inject-stress
          clusterScope: true
        when: "{{steps.precheck.status}} == Succeeded"
      - name: notify-metrics  # 通知: 控制面指标
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          # get-metrics参数
          - name: sleep-duration
            value: "60"
          # generate-message参数
          - name: stage
            value: "故障注入中"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: concurrency
            value: "{{inputs.parameters.inject-stress-concurrency}}"
          - name: QPS
            value: "{{inputs.parameters.inject-stress-list-qps}}"
          - name: total-duration
            value: "{{inputs.parameters.inject-stress-total-duration}}"
          # notify参数
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: metrics-collect-then-notify-to-wechat
        when: "{{steps.precheck.status}} == Succeeded && '{{inputs.parameters.webhook-url}}' != ''"

    - - name: cluster-status-collect-end  # 演练结束统计集群状态
        continueOn:
          failed: true
          error: true
        templateRef:
          name: cluster-status-collect-template
          template: cluster-status-collect
          clusterScope: true
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.cluster-status-image}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: notify-cluster-status-end  # 通知演练结束时集群状态
        continueOn:
          failed: true
          error: true
        arguments:
          parameters:
          - name: stage
            value: "演练结束"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"
          - name: cluster-status
            value: "{{steps.cluster-status-collect-end.outputs.parameters.result}}"
          - name: sleep-duration
            value: "30"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: metrics-collect-then-notify-to-wechat
        when: "'{{inputs.parameters.webhook-url}}' != ''"

    - - name: delete-resource # 删除资源
        arguments:
          parameters:
          - name: cmd
            value: "delete -n {{inputs.parameters.resource-create-namespace}} {{inputs.parameters.resource-create-object-type}} -l kubestress"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: kubectl-cmd
          template: kubectl-cmd
          clusterScope: true
        when: "{{steps.precheck.status}} == Succeeded && '{{inputs.parameters.enable-resource-create}}' == 'true'"


  - name: metrics-collect-then-notify-to-wechat
    inputs:
      parameters:
      # get-metrics参数
      - name: sleep-duration
        default: "0"
        description: "采集metrics前等待的时间"
      - name: kubeconfig-secret-name
        description: "测试remote cluster填该字段, 如未填些, 则测试当前集群(选填)"
      # notify参数
      - name: webhook-url
        description: "企业微信群webhook通知地址"
      - name: stage
        description: "演练执行阶段"
      - name: cluster-id
        description: "集群ID"
      - name: chaos-type
        description: "演练类型"
      - name: concurrency
        default: "N/A"
        description: "并发执行压测的Pod数"
      - name: QPS
        default: "N/A"
        description: "单个压测Pod每秒执行list的QPS"
      - name: total-duration
        default: "N/A"
        description: "压测持续时间"
      - name: cluster-status
        default: "N/A"
        description: "集群状态"
      - name: check-result
        default: "N/A"
        description: "前置检测结果"
      - name: details-message
        default: "N/A"
        description: "详细信息"
    steps:
    - - name: delay
        template: delay
        arguments:
          parameters:
          - name: duration
            value: "{{inputs.parameters.sleep-duration}}"
    - - name: get-metrics
        templateRef:
          name: controll-plan-metrics-collect-template
          template: get-metrics
          clusterScope: true
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
    - - name: generate-and-notify
        templateRef:
          name: wechat-notify-template
          template: generate-apiserver-overload-test-message-then-notify
          clusterScope: true
        arguments:
          parameters:
          - name: stage
            value: "{{inputs.parameters.stage}}"
          - name: cluster-id
            value: "{{inputs.parameters.cluster-id}}"
          - name: chaos-type
            value: "{{inputs.parameters.chaos-type}}"
          - name: concurrency
            value: "{{inputs.parameters.concurrency}}"
          - name: QPS
            value: "{{inputs.parameters.QPS}}"
          - name: total-duration
            value: "{{inputs.parameters.total-duration}}"
          - name: cluster-status
            value: "{{inputs.parameters.cluster-status}}"
          - name: controll-plane-metrics
            value: "{{steps.get-metrics.outputs.parameters.result}}"
          - name: check-result
            value: "{{inputs.parameters.check-result}}"
          - name: details-message
            value: "{{inputs.parameters.details-message}}"
          - name: webhook-url
            value: "{{inputs.parameters.webhook-url}}"

  - name: delay
    inputs:
      parameters:
      - name: duration
    suspend:
      duration: "{{inputs.parameters.duration}}"

---
# 功能说明: apiserver压测, 使用tke-chaos工具对apiserver发起大量洪泛list请求, 以检测apiserver的压力
# 参数说明:
#   inject-stress模版参数说明:
#     1. image: 压测工具镜像
#     2. namespace: list请求的namespace, 如果为空, 则默认不限制namespace
#     3. object-type: list的资源, 支持pods, configmaps
#     4. page-size: list是否分页, 默认值为0不分页
#     5. num-clients: list的客户端数, 默认值为1
#     6. qps: 每秒的请求数, 默认值为1
#     7. total-duration: 总共持续多长时间, 默认值为30s
#     8. from-cache: 是否从缓存中读取数据, 默认值为true, 如果为false, 则请求会击穿至etcd
#     9. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: inject-stress-template
spec:
  entrypoint: inject-stress
  templates:
  - name: inject-stress
    # inject-stress 参数
    inputs:
      parameters:
      - name: image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "压测工具镜像"
      - name: namespace
        default: ""
        description: "list请求的namespace, 如果为空, 则默认不限制namespace"
      - name: object-type
        default: "pods"
        description: "list的资源, 支持pods, configmaps"
      - name: page-size
        default: "0"
        description: "list是否分页, 默认值为0不分页"
      - name: num-clients
        default: "10"
        description: "list的客户端数, 默认值为1"
      - name: qps
        default: "1"
        description: "每秒的请求数, 默认值为1"
      - name: total-duration
        default: "30s"
        description: "总共持续多长时间, 默认值为30s"
      - name: from-cache
        default: "true"
        description: "是否从缓存中读取数据, 默认值为true, 如果为false, 则请求会击穿至etcd"
      - name: user-agent
        default: "kubestress"
        description: "list client UserAgent请求头, 默认值为kubestress"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    steps:
    - - name: internal-inject-stress
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: object-type
            value: "{{inputs.parameters.object-type}}"
          - name: page-size
            value: "{{inputs.parameters.page-size}}"
          - name: num-clients
            value: "{{inputs.parameters.num-clients}}"
          - name: qps
            value: "{{inputs.parameters.qps}}"
          - name: total-duration
            value: "{{inputs.parameters.total-duration}}"
          - name: from-cache
            value: "{{inputs.parameters.from-cache}}"
          - name: user-agent
            value: "{{inputs.parameters.user-agent}}"
        template: internal-inject-stress
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
    - - name: external-inject-stress
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: object-type
            value: "{{inputs.parameters.object-type}}"
          - name: page-size
            value: "{{inputs.parameters.page-size}}"
          - name: num-clients
            value: "{{inputs.parameters.num-clients}}"
          - name: qps
            value: "{{inputs.parameters.qps}}"
          - name: total-duration
            value: "{{inputs.parameters.total-duration}}"
          - name: from-cache
            value: "{{inputs.parameters.from-cache}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: user-agent
            value: "{{inputs.parameters.user-agent}}"
        template: external-inject-stress
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"

  - name: internal-inject-stress
    inputs:
      parameters:
      - name: image
      - name: namespace
      - name: object-type
      - name: page-size
      - name: num-clients
      - name: qps
      - name: total-duration
      - name: from-cache
      - name: user-agent
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - list
      - --namespace={{inputs.parameters.namespace}}
      - --object-type={{inputs.parameters.object-type}}
      - --page-size={{inputs.parameters.page-size}}
      - --num-clients={{inputs.parameters.num-clients}}
      - --qps={{inputs.parameters.qps}}
      - --total-duration={{inputs.parameters.total-duration}}
      - --from-cache={{inputs.parameters.from-cache}}
      - --user-agent={{inputs.parameters.user-agent}}

  - name: external-inject-stress
    inputs:
      parameters:
      - name: image
      - name: namespace
      - name: object-type
      - name: page-size
      - name: num-clients
      - name: qps
      - name: total-duration
      - name: from-cache
      - name: user-agent
      - name: kubeconfig-secret-name
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - list
      - --kubeconfig=/.kube/config
      - --namespace={{inputs.parameters.namespace}}
      - --object-type={{inputs.parameters.object-type}}
      - --page-size={{inputs.parameters.page-size}}
      - --num-clients={{inputs.parameters.num-clients}}
      - --qps={{inputs.parameters.qps}}
      - --total-duration={{inputs.parameters.total-duration}}
      - --from-cache={{inputs.parameters.from-cache}}
      - --user-agent={{inputs.parameters.user-agent}}
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

# 工作流异常中断后或需要提前终止时，可使用如下命令进行工作负载恢复
# 1. 如coredns deployment恢复
#   kubectl scale deployment coredns -n kube-system --replicas=xxx
---
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: workload-disruption-template
spec:
  entrypoint: main
  serviceAccountName: tke-chaos
  templates:
  - name: main
    inputs:
      parameters:
      - name: disruption-duration
        description: "服务中断持续时间"
      - name: workload-type
        description: "要测试的工作负载类型, 可选值: daemonset/deployment/statefulset"
      - name: workload-name
        description: "要测试的工作负载名称"
      - name: workload-namespace
        description: "工作负载所在命名空间"
      - name: kubeconfig-secret-name
        description: "测试remote cluster填该字段(选填)"
      - name: precheck-configmap-name
        default: "tke-chaos-precheck-resource"
        description: "预检查配置configmap名称"
      - name: precheck-configmap-namespace
        default: "tke-chaos-test"
        description: "预检查配置configmap所在命名空间"
    steps:
    - - name: precheck
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: precheck-configmap-name
            value: "{{inputs.parameters.precheck-configmap-name}}"
          - name: precheck-configmap-namespace
            value: "{{inputs.parameters.precheck-configmap-namespace}}"
          - name: source
            value: |
              kubectl get -n {{inputs.parameters.precheck-configmap-namespace}} configmap {{inputs.parameters.precheck-configmap-name}}
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    - - name: scale-down-workload
        arguments:
          parameters:
          - name: workload-type
            value: "{{inputs.parameters.workload-type}}"
          - name: workload-name
            value: "{{inputs.parameters.workload-name}}"
          - name: workload-namespace
            value: "{{inputs.parameters.workload-namespace}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: scale-down-workload
    - - name: suspend
        template: suspend
    - - name: scale-up-workload
        arguments:
          parameters:
          - name: replicas
            value: "{{steps.scale-down-workload.outputs.parameters.original-replicas}}"
          - name: workload-type
            value: "{{inputs.parameters.workload-type}}"
          - name: workload-name
            value: "{{inputs.parameters.workload-name}}"
          - name: workload-namespace
            value: "{{inputs.parameters.workload-namespace}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: scale-up-workload

  - name: scale-down-workload
    inputs:
      parameters:
      - name: workload-type
      - name: workload-name
      - name: workload-namespace
      - name: kubeconfig-secret-name
    dag:
      tasks:
      - name: scale-down-workload
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              if [ "{{inputs.parameters.workload-type}}" == "daemonset" ]; then
                kubectl patch daemonset {{inputs.parameters.workload-name}} \
                  -n {{inputs.parameters.workload-namespace}} \
                  --type='json' \
                  -p='[{"op": "add", "path": "/spec/template/spec/nodeSelector", "value": {"non-existing": "label"}}]'
              else
                kubectl get {{inputs.parameters.workload-type}} {{inputs.parameters.workload-name}} \
                  -n {{inputs.parameters.workload-namespace}} \
                  -o jsonpath='{.spec.replicas}'
                kubectl scale {{inputs.parameters.workload-type}} {{inputs.parameters.workload-name}} \
                  -n {{inputs.parameters.workload-namespace}} \
                  --replicas=0 >/dev/null 2>&1
              fi
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    outputs:
      parameters:
      - name: original-replicas
        valueFrom:
          parameter: "{{tasks.scale-down-workload.outputs.parameters.result}}"

  - name: scale-up-workload
    inputs:
      parameters:
      - name: replicas
      - name: workload-type
      - name: workload-name
      - name: workload-namespace
      - name: kubeconfig-secret-name
    dag:
      tasks:
      - name: scale-up-workload
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              if [ "{{inputs.parameters.workload-type}}" == "daemonset" ]; then
                kubectl rollout undo {{inputs.parameters.workload-type}} {{inputs.parameters.workload-name}} \
                  -n {{inputs.parameters.workload-namespace}}
              else
                kubectl scale {{inputs.parameters.workload-type}} {{inputs.parameters.workload-name}} \
                  -n {{inputs.parameters.workload-namespace}} \
                  --replicas={{inputs.parameters.replicas}}
              fi
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true

  - name: suspend
    suspend: {}

---
# 功能说明：在集群中创建资源，支持pods, configmaps
# 参数说明:
#   resource-archestrate模版参数说明:
#     1. image: 创建资源使用的工具镜像
#     2. namespace: 创建资源所在的命名空间
#     3. object-type: 创建资源的类型, 支持pods/configmaps
#     4. object-size-bytes: 创建资源的大小, 单位字节
#     5. object-count: 创建资源的数量
#     6. num-clients: 创建资源的客户端数量
#     7. qps: 创建资源的QPS
#     8. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: resource-archestrate
spec:
  entrypoint: resource-create
  templates:
  - name: resource-create
    inputs:
      parameters:
      - name: image
        default: "ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2"
        description: "创建资源使用的工具镜像"
      - name: namespace
        description: "创建资源所在的命名空间"
      - name: object-type
        default: "pods"
        description: "创建资源的类型, 支持pods/configmaps"
      - name: object-size-bytes
        default: "10000"
        description: "创建资源的大小, 单位字节"
      - name: object-count
        default: "100"
        description: "创建资源的数量"
      - name: num-clients
        default: "10"
        description: "创建资源的客户端数量"
      - name: qps
        default: "10"
        description: "创建资源的QPS"
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    steps:
    - - name: internal-resource-create
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: object-type
            value: "{{inputs.parameters.object-type}}"
          - name: object-size-bytes
            value: "{{inputs.parameters.object-size-bytes}}"
          - name: object-count
            value: "{{inputs.parameters.object-count}}"
          - name: num-clients
            value: "{{inputs.parameters.num-clients}}"
          - name: qps
            value: "{{inputs.parameters.qps}}"
        template: internal-resource-create
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' == ''"
    - - name: external-resource-create
        arguments:
          parameters:
          - name: image
            value: "{{inputs.parameters.image}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: object-type
            value: "{{inputs.parameters.object-type}}"
          - name: object-size-bytes
            value: "{{inputs.parameters.object-size-bytes}}"
          - name: object-count
            value: "{{inputs.parameters.object-count}}"
          - name: num-clients
            value: "{{inputs.parameters.num-clients}}"
          - name: qps
            value: "{{inputs.parameters.qps}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: external-resource-create
        when: "'{{inputs.parameters.kubeconfig-secret-name}}' != ''"

  - name: internal-resource-create
    inputs:
      parameters:
      - name: image
      - name: namespace
      - name: object-type
      - name: object-size-bytes
      - name: object-count
      - name: num-clients
      - name: qps
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - create
      - --namespace={{inputs.parameters.namespace}}
      - --object-type={{inputs.parameters.object-type}}
      - --object-size-bytes={{inputs.parameters.object-size-bytes}}
      - --object-count={{inputs.parameters.object-count}}
      - --num-clients={{inputs.parameters.num-clients}}
      - --qps={{inputs.parameters.qps}}

  - name: external-resource-create
    inputs:
      parameters:
      - name: image
      - name: namespace
      - name: object-type
      - name: object-size-bytes
      - name: object-count
      - name: num-clients
      - name: qps
      - name: kubeconfig-secret-name
    container:
      image: "{{inputs.parameters.image}}"
      command:
      - /kubestress
      - create
      - --kubeconfig=/.kube/config
      - --namespace={{inputs.parameters.namespace}}
      - --object-type={{inputs.parameters.object-type}}
      - --object-size-bytes={{inputs.parameters.object-size-bytes}}
      - --object-count={{inputs.parameters.object-count}}
      - --num-clients={{inputs.parameters.num-clients}}
      - --qps={{inputs.parameters.qps}}
      volumeMounts:
      - name: kubeconfig
        mountPath: "/.kube"
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{inputs.parameters.kubeconfig-secret-name}}"
        items:
        - key: config
          path: config

---
# 功能说明：创建或删除apf配置和apf限流规则, 详见
# https://doc.weixin.qq.com/doc/w3_ACYAlwbdAFwI8ImLq0SQcqldWe71Y?scode=AJEAIQdfAAoHwUzWGHAVoAPgaKAKk
# apf详见: https://kubernetes.io/zh-cn/docs/reference/kubernetes-api/policy-resources/priority-level-configuration-v1/
# 参数说明:
#   apf-orchestrate参数说明:
#     1. action: 操作类型，create/apply/delete
#     2. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
#     3. manifest: PriorityLevelConfiguration、FlowSchema的yaml配置
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: apf-orchestrate
spec:
  arguments:
    parameters:
    - name: user-agent
      value: "kubestress"
    # apf-orchestrate参数
    - name: action
      value: "apply"
    - name: manifest
      value: |
        ---
        apiVersion: flowcontrol.apiserver.k8s.io/v1
        kind: PriorityLevelConfiguration
        metadata:
          annotations:
            tke.cloud.tencent.com/objects-seats-rule: '{"objectsToSeats":[{"objects":1000,"seats":10},{"objects":10000,"seats":30},{"objects":20000,"seats":40},{"objects":50000,"seats":101}]}'
          name: tke-chaos
        spec:
          limited:
            limitResponse:
              queuing:
                handSize: 6
                queueLengthLimit: 50
                queues: 128
              type: Queue
            nominalConcurrencyShares: 1
            borrowingLimitPercent: 0
            lendablePercent: 0
          type: Limited
        ---
        apiVersion: flowcontrol.apiserver.k8s.io/v1
        kind: FlowSchema
        metadata:
          name: tke-chaos
        spec:
          distinguisherMethod:
            type: ByUser
          matchingPrecedence: 1
          priorityLevelConfiguration:
            name: tke-chaos
          rules:
          - resourceRules:
            - apiGroups:
              - '*'
              clusterScope: true
              namespaces:
              - '*'
              resources:
              - 'pods'
              - 'configmaps'
              - 'secrets'
              verbs:
              - 'list'
            subjects:
            - userAgent:
                nameRegexp: "^({{workflow.parameters.user-agent}}).*"
              kind: UserAgent
  entrypoint: apf-orchestrate
  templates:
  - name: apf-orchestrate
    inputs:
      parameters:
      # kubectl-cmd参数
      - name: action  # 操作类型，create/apply/delete
        default: "apply"
      - name: manifest  # 操作的yaml配置
      - name: kubeconfig-secret-name   # 操作的集群kubeconfig secret名称, 当为空时, 则为incluster
    dag:
      tasks:
      - name: kubectl-cmd
        arguments:
          parameters:
          - name: action
            value: "{{inputs.parameters.action}}"
          - name: manifest
            value: "{{inputs.parameters.manifest}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        templateRef:
          name: kubectl-cmd
          template: kubectl-mutating-cmd
          clusterScope: true

---
# 功能说明: 控制面负载信息采集, 使用kubectl top命令, 获取k8s集群中etcd, apiserver, master节点负载信息
# 参数说明:
#   get-metrics模版参数说明:
#     1. kubeconfig-secret-name: 用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: controll-plan-metrics-collect-template
spec:
  entrypoint: get-metrics
  templates:
  - name: get-metrics
    inputs:
      parameters:
      - name: kubeconfig-secret-name
        description: "用于指定接入的K8s集群的kubeconfig凭证的secret名称, 如果为空，则默认为当前集群"
    dag:
      tasks:
      - name: get-metrics
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              #!/bin/bash
              echo ""
              echo "=== APIServer Metrics ==="
              kubectl top pod -n kube-system | grep kube-apiserver
              echo "=== ETCD Metrics ==="
              kubectl top pod -n kube-system | grep etcd
              echo "=== Master Node Metrics ==="
              kubectl top node -l node-role.kubernetes.io/master=true
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    outputs:
      parameters:
      - name: result
        valueFrom:
          parameter: "{{tasks.get-metrics.outputs.parameters.result}}"

