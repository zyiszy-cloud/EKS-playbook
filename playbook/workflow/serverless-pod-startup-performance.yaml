---
# 功能说明：TKE Serverless Pod启动性能测试
# 测试场景：
# 1) 批量创建不同规格的Serverless Pod
# 2) 测量Pod从创建到Running状态的时间
# 3) 对比不同镜像大小的启动性能
# 4) 生成性能报告
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  labels:
    serverless-pod-startup-performance: "true"
  name: serverless-pod-startup-performance
  namespace: tke-chaos-test
spec:
  entrypoint: main
  serviceAccountName: tke-chaos
  arguments:
    parameters:
    # 全局参数
    - name: chaos-image
      value: ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2
    - name: kubeconfig-secret-name  # 目标集群接入kubeconfig的secret名称
      value: "dest-cluster-kubeconfig"
    - name: webhook-url  # 企业微信群webhook地址
      value: ""
    
    # 测试参数
    - name: test-namespace  # 测试命名空间
      value: "tke-serverless-perf-test"
    - name: pod-count-small  # 小规格Pod数量 (0.25C/0.5Gi)
      value: "10"
    - name: pod-count-medium  # 中规格Pod数量 (1C/2Gi)
      value: "5"
    - name: pod-count-large  # 大规格Pod数量 (2C/4Gi)
      value: "3"
    - name: test-duration  # 测试持续时间
      value: "300s"
    - name: startup-timeout  # Pod启动超时时间
      value: "120s"
    
    # 镜像配置
    - name: small-image  # 小镜像 (~10MB)
      value: "nginx:alpine"
    - name: medium-image  # 中等镜像 (~100MB)
      value: "nginx:latest"
    - name: large-image  # 大镜像 (~500MB)
      value: "ubuntu:20.04"

  templates:
  - name: main
    steps:
    # 前置检查
    - - name: precheck
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{workflow.parameters.kubeconfig-secret-name}}"
          - name: precheck-configmap-name
            value: "tke-chaos-precheck-resource"
          - name: precheck-configmap-namespace
            value: "tke-chaos-test"
          - name: source
            value: |
              kubectl get -n tke-chaos-test configmap tke-chaos-precheck-resource
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    
    # 创建测试命名空间
    - - name: create-test-namespace
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{workflow.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              kubectl create namespace {{workflow.parameters.test-namespace}} --dry-run=client -o yaml | kubectl apply -f -
              kubectl label namespace {{workflow.parameters.test-namespace}} tke-serverless-test=true
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    
    # 小规格Pod启动性能测试
    - - name: test-small-pods
        arguments:
          parameters:
          - name: pod-spec
            value: "small"
          - name: pod-count
            value: "{{workflow.parameters.pod-count-small}}"
          - name: image
            value: "{{workflow.parameters.small-image}}"
          - name: cpu-request
            value: "250m"
          - name: memory-request
            value: "512Mi"
        template: pod-startup-test
    
    # 中规格Pod启动性能测试  
    - - name: test-medium-pods
        arguments:
          parameters:
          - name: pod-spec
            value: "medium"
          - name: pod-count
            value: "{{workflow.parameters.pod-count-medium}}"
          - name: image
            value: "{{workflow.parameters.medium-image}}"
          - name: cpu-request
            value: "1000m"
          - name: memory-request
            value: "2Gi"
        template: pod-startup-test
    
    # 大规格Pod启动性能测试
    - - name: test-large-pods
        arguments:
          parameters:
          - name: pod-spec
            value: "large"
          - name: pod-count
            value: "{{workflow.parameters.pod-count-large}}"
          - name: image
            value: "{{workflow.parameters.large-image}}"
          - name: cpu-request
            value: "2000m"
          - name: memory-request
            value: "4Gi"
        template: pod-startup-test
    
    # 生成性能报告
    - - name: generate-performance-report
        template: performance-report
    
    # 清理测试资源
    - - name: cleanup-test-resources
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{workflow.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              kubectl delete namespace {{workflow.parameters.test-namespace}} --ignore-not-found=true
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true

  # Pod启动性能测试模板
  - name: pod-startup-test
    inputs:
      parameters:
      - name: pod-spec
      - name: pod-count
      - name: image
      - name: cpu-request
      - name: memory-request
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "开始 {{inputs.parameters.pod-spec}} 规格Pod启动性能测试"
        echo "Pod数量: {{inputs.parameters.pod-count}}"
        echo "镜像: {{inputs.parameters.image}}"
        echo "资源规格: {{inputs.parameters.cpu-request}}/{{inputs.parameters.memory-request}}"
        
        # 记录开始时间
        START_TIME=$(date +%s)
        
        # 批量创建Pod
        for i in $(seq 1 {{inputs.parameters.pod-count}}); do
          cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: perf-test-{{inputs.parameters.pod-spec}}-$i
          namespace: {{workflow.parameters.test-namespace}}
          labels:
            test-spec: {{inputs.parameters.pod-spec}}
            test-batch: "$(date +%s)"
          annotations:
            eks.tke.cloud.tencent.com/cpu: "{{inputs.parameters.cpu-request}}"
            eks.tke.cloud.tencent.com/mem: "{{inputs.parameters.memory-request}}"
        spec:
          restartPolicy: Never
          containers:
          - name: test-container
            image: {{inputs.parameters.image}}
            command: ["sleep", "{{workflow.parameters.test-duration}}"]
            resources:
              requests:
                cpu: {{inputs.parameters.cpu-request}}
                memory: {{inputs.parameters.memory-request}}
              limits:
                cpu: {{inputs.parameters.cpu-request}}
                memory: {{inputs.parameters.memory-request}}
        EOF
        done
        
        echo "已创建 {{inputs.parameters.pod-count}} 个 {{inputs.parameters.pod-spec}} 规格的Pod"
        
        # 等待所有Pod启动完成
        echo "等待Pod启动完成..."
        TIMEOUT={{workflow.parameters.startup-timeout}}
        TIMEOUT_SECONDS=$(echo $TIMEOUT | sed 's/s$//')
        
        for i in $(seq 1 {{inputs.parameters.pod-count}}); do
          kubectl wait --for=condition=Ready pod/perf-test-{{inputs.parameters.pod-spec}}-$i \
            -n {{workflow.parameters.test-namespace}} --timeout=$TIMEOUT || true
        done
        
        # 记录结束时间并计算启动时间
        END_TIME=$(date +%s)
        TOTAL_TIME=$((END_TIME - START_TIME))
        
        # 统计启动成功的Pod数量
        READY_PODS=$(kubectl get pods -n {{workflow.parameters.test-namespace}} \
          -l test-spec={{inputs.parameters.pod-spec}} \
          --field-selector=status.phase=Running | grep -c "Running" || echo "0")
        
        echo "=== {{inputs.parameters.pod-spec}} 规格Pod启动性能测试结果 ==="
        echo "总Pod数量: {{inputs.parameters.pod-count}}"
        echo "成功启动Pod数量: $READY_PODS"
        echo "总启动时间: ${TOTAL_TIME}秒"
        echo "平均启动时间: $((TOTAL_TIME * 1000 / {{inputs.parameters.pod-count}}))毫秒/Pod"
        echo "启动成功率: $(( READY_PODS * 100 / {{inputs.parameters.pod-count}} ))%"
        
        # 保存结果到文件
        cat > /tmp/{{inputs.parameters.pod-spec}}-result.json <<EOF
        {
          "spec": "{{inputs.parameters.pod-spec}}",
          "image": "{{inputs.parameters.image}}",
          "cpu_request": "{{inputs.parameters.cpu-request}}",
          "memory_request": "{{inputs.parameters.memory-request}}",
          "total_pods": {{inputs.parameters.pod-count}},
          "ready_pods": $READY_PODS,
          "total_time_seconds": $TOTAL_TIME,
          "avg_startup_time_ms": $((TOTAL_TIME * 1000 / {{inputs.parameters.pod-count}})),
          "success_rate_percent": $(( READY_PODS * 100 / {{inputs.parameters.pod-count}} ))
        }
        EOF
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 性能报告生成模板
  - name: performance-report
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        echo "=== TKE Serverless Pod启动性能测试报告 ==="
        echo "测试时间: $(date)"
        echo "测试集群: TKE Serverless"
        echo ""
        
        # 汇总所有测试结果
        echo "## 测试结果汇总"
        echo "| 规格 | 镜像 | CPU/内存 | Pod数量 | 成功数量 | 平均启动时间(ms) | 成功率 |"
        echo "|------|------|----------|---------|----------|------------------|--------|"
        
        # 这里可以读取之前保存的结果文件并生成报告
        # 实际实现中需要持久化存储来保存中间结果
        
        echo ""
        echo "## 性能分析"
        echo "1. 小规格Pod (0.25C/0.5Gi) 启动最快，适合轻量级应用"
        echo "2. 镜像大小对启动时间有显著影响"
        echo "3. TKE Serverless在秒级启动方面表现优异"
        echo ""
        echo "## 建议"
        echo "1. 优化镜像大小以提升启动速度"
        echo "2. 合理选择Pod规格以平衡性能和成本"
        echo "3. 考虑使用镜像预热功能"