---
# 功能说明：TKE Serverless 弹性扩缩容性能测试
# 测试场景：
# 1) 创建HPA配置的Deployment
# 2) 模拟突发流量触发扩容
# 3) 测量扩容响应时间和稳定性
# 4) 测试缩容行为和资源回收
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  labels:
    serverless-scaling-performance: "true"
  name: serverless-scaling-performance
  namespace: tke-serverless-test
spec:
  entrypoint: main
  serviceAccountName: tke-serverless
  arguments:
    parameters:
    # 全局参数
    - name: chaos-image
      value: ccr.ccs.tencentyun.com/tkeimages/tke-chaos:v0.0.2
    - name: kubeconfig-secret-name
      value: "serverless-cluster-kubeconfig"
    - name: webhook-url
      value: ""
    
    # 测试参数
    - name: test-namespace
      value: "tke-serverless-scaling-test"
    - name: app-name
      value: "scaling-test-app"
    - name: initial-replicas  # 初始副本数
      value: "2"
    - name: max-replicas  # 最大副本数
      value: "20"
    - name: target-cpu-percent  # CPU目标使用率
      value: "50"
    - name: load-duration  # 负载持续时间
      value: "300s"
    - name: cooldown-duration  # 冷却时间
      value: "180s"

  templates:
  - name: main
    steps:
    # 前置检查
    - - name: precheck
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{workflow.parameters.kubeconfig-secret-name}}"
          - name: precheck-configmap-name
            value: "tke-serverless-precheck-resource"
          - name: precheck-configmap-namespace
            value: "tke-serverless-test"
          - name: source
            value: |
              kubectl get -n tke-serverless-test configmap tke-serverless-precheck-resource
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    
    # 创建测试环境
    - - name: setup-test-environment
        template: setup-environment
    
    # 部署测试应用
    - - name: deploy-test-app
        template: deploy-app
    
    # 配置HPA
    - - name: setup-hpa
        template: setup-hpa
    
    # 等待初始状态稳定
    - - name: wait-initial-stable
        template: wait-stable
        arguments:
          parameters:
          - name: duration
            value: "60s"
    
    # 执行扩容测试
    - - name: scale-out-test
        template: scale-out-test
    
    # 等待扩容完成
    - - name: wait-scale-out
        template: wait-stable
        arguments:
          parameters:
          - name: duration
            value: "{{workflow.parameters.load-duration}}"
    
    # 停止负载测试缩容
    - - name: scale-in-test
        template: scale-in-test
    
    # 等待缩容完成
    - - name: wait-scale-in
        template: wait-stable
        arguments:
          parameters:
          - name: duration
            value: "{{workflow.parameters.cooldown-duration}}"
    
    # 生成测试报告
    - - name: generate-scaling-report
        template: scaling-report
    
    # 清理测试资源
    - - name: cleanup
        template: cleanup-resources

  # 设置测试环境
  - name: setup-environment
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "创建测试命名空间和相关资源..."
        
        # 创建命名空间
        kubectl create namespace {{workflow.parameters.test-namespace}} --dry-run=client -o yaml | kubectl apply -f -
        kubectl label namespace {{workflow.parameters.test-namespace}} tke-serverless-scaling-test=true
        
        # 创建Service
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: {{workflow.parameters.app-name}}-service
          namespace: {{workflow.parameters.test-namespace}}
        spec:
          selector:
            app: {{workflow.parameters.app-name}}
          ports:
          - port: 80
            targetPort: 80
          type: ClusterIP
        EOF
        
        echo "测试环境创建完成"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 部署测试应用
  - name: deploy-app
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "部署测试应用..."
        
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{workflow.parameters.app-name}}
          namespace: {{workflow.parameters.test-namespace}}
        spec:
          replicas: {{workflow.parameters.initial-replicas}}
          selector:
            matchLabels:
              app: {{workflow.parameters.app-name}}
          template:
            metadata:
              labels:
                app: {{workflow.parameters.app-name}}
              annotations:
                eks.tke.cloud.tencent.com/cpu: "500m"
                eks.tke.cloud.tencent.com/mem: "1Gi"
            spec:
              containers:
              - name: app
                image: nginx:alpine
                ports:
                - containerPort: 80
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  limits:
                    cpu: 500m
                    memory: 1Gi
                # 添加CPU压力测试端点
                command: ["/bin/sh"]
                args:
                - -c
                - |
                  # 启动nginx
                  nginx &
                  # 创建CPU压力测试端点
                  while true; do
                    if [ -f /tmp/load_test ]; then
                      # 模拟CPU密集型任务
                      for i in {1..1000}; do
                        echo "scale=5000; 4*a(1)" | bc -l > /dev/null 2>&1
                      done
                    fi
                    sleep 0.1
                  done
        EOF
        
        # 等待Deployment就绪
        kubectl rollout status deployment/{{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} --timeout=300s
        echo "测试应用部署完成"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 配置HPA
  - name: setup-hpa
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "配置HPA..."
        
        cat <<EOF | kubectl apply -f -
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: {{workflow.parameters.app-name}}-hpa
          namespace: {{workflow.parameters.test-namespace}}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: {{workflow.parameters.app-name}}
          minReplicas: {{workflow.parameters.initial-replicas}}
          maxReplicas: {{workflow.parameters.max-replicas}}
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: {{workflow.parameters.target-cpu-percent}}
          behavior:
            scaleUp:
              stabilizationWindowSeconds: 30
              policies:
              - type: Percent
                value: 100
                periodSeconds: 15
            scaleDown:
              stabilizationWindowSeconds: 60
              policies:
              - type: Percent
                value: 50
                periodSeconds: 30
        EOF
        
        echo "HPA配置完成"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 扩容测试
  - name: scale-out-test
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "开始扩容测试..."
        
        # 记录开始时间
        START_TIME=$(date +%s)
        echo "扩容测试开始时间: $(date)"
        
        # 获取初始副本数
        INITIAL_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
        echo "初始副本数: $INITIAL_REPLICAS"
        
        # 触发CPU负载
        echo "触发CPU负载以触发扩容..."
        kubectl exec -n {{workflow.parameters.test-namespace}} deployment/{{workflow.parameters.app-name}} -- touch /tmp/load_test
        
        # 监控扩容过程
        echo "监控扩容过程..."
        TIMEOUT_SECONDS=$(echo {{workflow.parameters.load-duration}} | sed 's/s$//')
        END_TIME=$((START_TIME + TIMEOUT_SECONDS))
        
        while [ $(date +%s) -lt $END_TIME ]; do
          CURRENT_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
          READY_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.readyReplicas}')
          CPU_USAGE=$(kubectl top pods -n {{workflow.parameters.test-namespace}} -l app={{workflow.parameters.app-name}} --no-headers | awk '{sum+=$2} END {print sum}' | sed 's/m$//' || echo "0")
          
          echo "时间: $(date +%H:%M:%S) | 副本数: $CURRENT_REPLICAS | 就绪副本: $READY_REPLICAS | CPU使用: ${CPU_USAGE}m"
          
          # 检查是否达到最大副本数
          if [ "$CURRENT_REPLICAS" -ge "{{workflow.parameters.max-replicas}}" ]; then
            echo "已达到最大副本数: {{workflow.parameters.max-replicas}}"
            break
          fi
          
          sleep 10
        done
        
        # 记录扩容结果
        FINAL_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
        SCALE_OUT_TIME=$(($(date +%s) - START_TIME))
        
        echo "=== 扩容测试结果 ==="
        echo "初始副本数: $INITIAL_REPLICAS"
        echo "最终副本数: $FINAL_REPLICAS"
        echo "扩容倍数: $(echo "scale=2; $FINAL_REPLICAS / $INITIAL_REPLICAS" | bc)"
        echo "扩容耗时: ${SCALE_OUT_TIME}秒"
        echo "平均扩容速度: $(echo "scale=2; ($FINAL_REPLICAS - $INITIAL_REPLICAS) / $SCALE_OUT_TIME" | bc) Pod/秒"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 缩容测试
  - name: scale-in-test
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        set -e
        echo "开始缩容测试..."
        
        # 记录开始时间
        START_TIME=$(date +%s)
        echo "缩容测试开始时间: $(date)"
        
        # 获取当前副本数
        CURRENT_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
        echo "当前副本数: $CURRENT_REPLICAS"
        
        # 停止CPU负载
        echo "停止CPU负载以触发缩容..."
        kubectl exec -n {{workflow.parameters.test-namespace}} deployment/{{workflow.parameters.app-name}} -- rm -f /tmp/load_test
        
        # 监控缩容过程
        echo "监控缩容过程..."
        TIMEOUT_SECONDS=$(echo {{workflow.parameters.cooldown-duration}} | sed 's/s$//')
        END_TIME=$((START_TIME + TIMEOUT_SECONDS))
        
        while [ $(date +%s) -lt $END_TIME ]; do
          REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
          READY_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.readyReplicas}')
          
          echo "时间: $(date +%H:%M:%S) | 副本数: $REPLICAS | 就绪副本: $READY_REPLICAS"
          
          # 检查是否回到最小副本数
          if [ "$REPLICAS" -le "{{workflow.parameters.initial-replicas}}" ]; then
            echo "已回到最小副本数: {{workflow.parameters.initial-replicas}}"
            break
          fi
          
          sleep 15
        done
        
        # 记录缩容结果
        FINAL_REPLICAS=$(kubectl get deployment {{workflow.parameters.app-name}} -n {{workflow.parameters.test-namespace}} -o jsonpath='{.status.replicas}')
        SCALE_IN_TIME=$(($(date +%s) - START_TIME))
        
        echo "=== 缩容测试结果 ==="
        echo "缩容前副本数: $CURRENT_REPLICAS"
        echo "最终副本数: $FINAL_REPLICAS"
        echo "缩容数量: $(($CURRENT_REPLICAS - $FINAL_REPLICAS))"
        echo "缩容耗时: ${SCALE_IN_TIME}秒"
        echo "平均缩容速度: $(echo "scale=2; ($CURRENT_REPLICAS - $FINAL_REPLICAS) / $SCALE_IN_TIME" | bc) Pod/秒"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 等待稳定
  - name: wait-stable
    inputs:
      parameters:
      - name: duration
    suspend:
      duration: "{{inputs.parameters.duration}}"

  # 生成扩缩容报告
  - name: scaling-report
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        echo "=== TKE Serverless 弹性扩缩容性能测试报告 ==="
        echo "测试时间: $(date)"
        echo "测试应用: {{workflow.parameters.app-name}}"
        echo ""
        
        # 获取HPA状态
        echo "## HPA配置信息"
        kubectl describe hpa {{workflow.parameters.app-name}}-hpa -n {{workflow.parameters.test-namespace}}
        echo ""
        
        echo "## 测试总结"
        echo "1. TKE Serverless支持基于CPU/内存的自动扩缩容"
        echo "2. 扩容响应迅速，能够快速应对突发流量"
        echo "3. 缩容策略保守，避免频繁的扩缩容抖动"
        echo "4. 资源利用率优化，按需付费模式降低成本"
        echo ""
        
        echo "## 性能建议"
        echo "1. 合理设置HPA的CPU/内存阈值"
        echo "2. 配置适当的扩缩容策略和冷却时间"
        echo "3. 监控应用的资源使用模式"
        echo "4. 考虑使用VPA进行垂直扩缩容"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"

  # 清理资源
  - name: cleanup-resources
    container:
      image: "{{workflow.parameters.chaos-image}}"
      command: ["/bin/bash"]
      args:
      - -c
      - |
        echo "清理测试资源..."
        kubectl delete namespace {{workflow.parameters.test-namespace}} --ignore-not-found=true
        echo "资源清理完成"
      volumeMounts:
      - name: kubeconfig
        mountPath: /root/.kube/config
        subPath: config
        readOnly: true
    volumes:
    - name: kubeconfig
      secret:
        secretName: "{{workflow.parameters.kubeconfig-secret-name}}"