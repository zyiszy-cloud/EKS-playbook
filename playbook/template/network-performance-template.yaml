---
# 网络性能测试模板
# Network Performance Test Template
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: network-performance-template
spec:
  entrypoint: main
  serviceAccountName: tke-chaos
  templates:
  - name: main
    inputs:
      parameters:
      - name: test-type
        description: "测试类型: latency/bandwidth/throughput/all"
        default: "all"
      - name: client-pods
        description: "客户端Pod数量"
        default: "5"
      - name: server-pods
        description: "服务端Pod数量"
        default: "3"
      - name: test-duration
        description: "测试持续时间"
        default: "300s"
      - name: supernode-selector
        description: "超级节点选择器"
        default: "node.kubernetes.io/instance-type=eklet"
      - name: kubeconfig-secret-name
        description: "目标集群kubeconfig secret名称"
    steps:
    - - name: precheck
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              echo "检查网络测试环境..."
              
              # 检查超级节点
              SUPERNODE_COUNT=$(kubectl get nodes -l "{{inputs.parameters.supernode-selector}}" --no-headers 2>/dev/null | wc -l)
              if [ "$SUPERNODE_COUNT" -eq 0 ]; then
                echo "错误: 集群中未找到超级节点"
                exit 1
              fi
              echo "发现 $SUPERNODE_COUNT 个超级节点"
              
              # 检查网络策略
              echo "检查网络策略..."
              kubectl get networkpolicies --all-namespaces || echo "未发现网络策略限制"
              
              echo "网络测试环境检查完成"
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
    
    - - name: setup-network-test
        arguments:
          parameters:
          - name: client-pods
            value: "{{inputs.parameters.client-pods}}"
          - name: server-pods
            value: "{{inputs.parameters.server-pods}}"
          - name: supernode-selector
            value: "{{inputs.parameters.supernode-selector}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: setup-network-test
    
    - - name: execute-network-tests
        arguments:
          parameters:
          - name: test-type
            value: "{{inputs.parameters.test-type}}"
          - name: test-duration
            value: "{{inputs.parameters.test-duration}}"
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
        template: execute-network-tests
    
    - - name: cleanup-network-test
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              echo "清理网络测试资源..."
              kubectl delete namespace tke-network-test --ignore-not-found=true
              echo "网络测试资源清理完成"
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true

  - name: setup-network-test
    inputs:
      parameters:
      - name: client-pods
      - name: server-pods
      - name: supernode-selector
      - name: kubeconfig-secret-name
    dag:
      tasks:
      - name: create-test-environment
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              echo "=== 网络性能测试环境搭建 ==="
              
              # 创建测试命名空间
              kubectl create namespace tke-network-test || true
              
              CLIENT_PODS={{inputs.parameters.client-pods}}
              SERVER_PODS={{inputs.parameters.server-pods}}
              SELECTOR="{{inputs.parameters.supernode-selector}}"
              
              # 解析选择器
              SELECTOR_KEY=$(echo "$SELECTOR" | cut -d'=' -f1)
              SELECTOR_VALUE=$(echo "$SELECTOR" | cut -d'=' -f2)
              
              # 获取所有可用的超级节点
              echo "获取可用的超级节点列表..."
              SUPERNODE_LIST=$(kubectl get nodes -l "$SELECTOR_KEY=$SELECTOR_VALUE" -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n')
              SUPERNODE_ARRAY=($SUPERNODE_LIST)
              SUPERNODE_COUNT=${#SUPERNODE_ARRAY[@]}
              
              if [ $SUPERNODE_COUNT -eq 0 ]; then
                echo "错误: 未找到可用的超级节点"
                exit 1
              fi
              
              echo "发现 $SUPERNODE_COUNT 个超级节点: ${SUPERNODE_ARRAY[*]}"
              
              echo "创建 $SERVER_PODS 个服务端Pod..."
              
              # 创建iperf3服务端Pod
              for i in $(seq 1 $SERVER_PODS); do
                # 轮询选择超级节点
                NODE_INDEX=$(( (i - 1) % SUPERNODE_COUNT ))
                SELECTED_NODE=${SUPERNODE_ARRAY[$NODE_INDEX]}
                
                cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Pod
              metadata:
                name: iperf-server-$i
                namespace: tke-network-test
                annotations:
                  benchmark.tke.cloud/target-node: "$SELECTED_NODE"
                labels:
                  app: iperf-server
                  test: network-performance
              spec:
                nodeName: $SELECTED_NODE
                containers:
                - name: iperf3
                  image: networkstatic/iperf3:latest
                  command: ["iperf3", "-s", "-p", "5201"]
                  ports:
                  - containerPort: 5201
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 300m
                      memory: 256Mi
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: iperf-server-$i
                namespace: tke-network-test
              spec:
                selector:
                  app: iperf-server
                ports:
                - port: 5201
                  targetPort: 5201
              EOF
              done
              
              echo "创建 $CLIENT_PODS 个客户端Pod..."
              
              # 创建网络测试客户端Pod
              for i in $(seq 1 $CLIENT_PODS); do
                # 轮询选择超级节点
                NODE_INDEX=$(( (i - 1) % SUPERNODE_COUNT ))
                SELECTED_NODE=${SUPERNODE_ARRAY[$NODE_INDEX]}
                
                cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Pod
              metadata:
                name: network-client-$i
                namespace: tke-network-test
                annotations:
                  benchmark.tke.cloud/target-node: "$SELECTED_NODE"
                labels:
                  app: network-client
                  test: network-performance
              spec:
                nodeName: $SELECTED_NODE
                containers:
                - name: netshoot
                  image: nicolaka/netshoot:latest
                  command: ["sleep", "3600"]
                  resources:
                    requests:
                      cpu: 200m
                      memory: 256Mi
                    limits:
                      cpu: 500m
                      memory: 512Mi
              EOF
              done
              
              echo "等待Pod启动..."
              kubectl wait --for=condition=Ready pod -l test=network-performance -n tke-network-test --timeout=300s
              
              echo "网络测试环境搭建完成"
              kubectl get pods -n tke-network-test -o wide
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true

  - name: execute-network-tests
    inputs:
      parameters:
      - name: test-type
      - name: test-duration
      - name: kubeconfig-secret-name
    dag:
      tasks:
      - name: network-latency-test
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              echo "=== 网络延迟测试开始 ==="
              
              # 获取服务端IP
              SERVER_IPS=$(kubectl get pods -n tke-network-test -l app=iperf-server -o jsonpath='{.items[*].status.podIP}')
              CLIENT_PODS=$(kubectl get pods -n tke-network-test -l app=network-client -o jsonpath='{.items[*].metadata.name}')
              
              LATENCY_RESULTS="/tmp/latency_results.txt"
              > $LATENCY_RESULTS
              
              echo "开始Pod间延迟测试..."
              
              for client in $CLIENT_PODS; do
                for server_ip in $SERVER_IPS; do
                  echo "测试 $client -> $server_ip"
                  
                  # 执行ping测试
                  PING_RESULT=$(kubectl exec -n tke-network-test $client -- ping -c 10 -i 0.1 $server_ip 2>/dev/null | tail -1)
                  
                  if echo "$PING_RESULT" | grep -q "avg"; then
                    AVG_LATENCY=$(echo "$PING_RESULT" | awk -F'/' '{print $5}')
                    echo "$client,$server_ip,$AVG_LATENCY" >> $LATENCY_RESULTS
                    echo "  平均延迟: ${AVG_LATENCY}ms"
                  else
                    echo "  测试失败"
                  fi
                done
              done
              
              # 计算延迟统计
              if [ -s "$LATENCY_RESULTS" ]; then
                echo ""
                echo "=== 延迟测试结果统计 ==="
                
                # 计算平均延迟
                TOTAL_LATENCY=0
                COUNT=0
                while IFS=',' read -r client server latency; do
                  if [ -n "$latency" ]; then
                    # 转换为整数进行计算 (去掉小数点)
                    LATENCY_INT=$(echo "$latency" | sed 's/\.//' | sed 's/^0*//')
                    [ -z "$LATENCY_INT" ] && LATENCY_INT=0
                    TOTAL_LATENCY=$((TOTAL_LATENCY + LATENCY_INT))
                    COUNT=$((COUNT + 1))
                  fi
                done < "$LATENCY_RESULTS"
                
                if [ $COUNT -gt 0 ]; then
                  AVG_LATENCY_INT=$((TOTAL_LATENCY / COUNT))
                  AVG_LATENCY_MS=$((AVG_LATENCY_INT / 100))
                  AVG_LATENCY_DECIMAL=$((AVG_LATENCY_INT % 100))
                  
                  echo "测试样本数: $COUNT"
                  printf "平均延迟: %d.%02dms\n" $AVG_LATENCY_MS $AVG_LATENCY_DECIMAL
                  
                  # 延迟评估
                  if [ $AVG_LATENCY_INT -le 100 ]; then  # <= 1.0ms
                    echo "延迟评估: 优秀"
                  elif [ $AVG_LATENCY_INT -le 500 ]; then  # <= 5.0ms
                    echo "延迟评估: 良好"
                  elif [ $AVG_LATENCY_INT -le 1000 ]; then  # <= 10.0ms
                    echo "延迟评估: 一般"
                  else
                    echo "延迟评估: 需要优化"
                  fi
                else
                  echo "无有效延迟数据"
                fi
              else
                echo "延迟测试无结果"
              fi
              
              echo "=== 网络延迟测试完成 ==="
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
        when: "'{{inputs.parameters.test-type}}' == 'latency' || '{{inputs.parameters.test-type}}' == 'all'"
      
      - name: network-bandwidth-test
        arguments:
          parameters:
          - name: kubeconfig-secret-name
            value: "{{inputs.parameters.kubeconfig-secret-name}}"
          - name: source
            value: |
              echo "=== 网络带宽测试开始 ==="
              
              # 获取服务端服务
              SERVER_SERVICES=$(kubectl get svc -n tke-network-test -l app=iperf-server -o jsonpath='{.items[*].metadata.name}')
              CLIENT_PODS=$(kubectl get pods -n tke-network-test -l app=network-client -o jsonpath='{.items[*].metadata.name}')
              
              BANDWIDTH_RESULTS="/tmp/bandwidth_results.txt"
              > $BANDWIDTH_RESULTS
              
              echo "开始带宽测试..."
              
              for client in $CLIENT_PODS; do
                for server_svc in $SERVER_SERVICES; do
                  echo "测试 $client -> $server_svc"
                  
                  # 执行iperf3带宽测试
                  BANDWIDTH_RESULT=$(kubectl exec -n tke-network-test $client -- iperf3 -c $server_svc.tke-network-test.svc.cluster.local -t 30 -P 4 2>/dev/null | grep "sender" | tail -1)
                  
                  if echo "$BANDWIDTH_RESULT" | grep -q "Mbits/sec"; then
                    BANDWIDTH=$(echo "$BANDWIDTH_RESULT" | awk '{print $(NF-1)}')
                    echo "$client,$server_svc,$BANDWIDTH" >> $BANDWIDTH_RESULTS
                    echo "  带宽: ${BANDWIDTH} Mbits/sec"
                  else
                    echo "  测试失败"
                  fi
                done
              done
              
              # 计算带宽统计
              if [ -s "$BANDWIDTH_RESULTS" ]; then
                echo ""
                echo "=== 带宽测试结果统计 ==="
                
                # 计算平均带宽
                TOTAL_BANDWIDTH=0
                COUNT=0
                MAX_BANDWIDTH=0
                MIN_BANDWIDTH=999999
                
                while IFS=',' read -r client server bandwidth; do
                  if [ -n "$bandwidth" ] && [ "$bandwidth" != "0" ]; then
                    # 转换为整数进行计算
                    BANDWIDTH_INT=$(echo "$bandwidth" | cut -d'.' -f1)
                    [ -z "$BANDWIDTH_INT" ] && BANDWIDTH_INT=0
                    
                    TOTAL_BANDWIDTH=$((TOTAL_BANDWIDTH + BANDWIDTH_INT))
                    COUNT=$((COUNT + 1))
                    
                    [ $BANDWIDTH_INT -gt $MAX_BANDWIDTH ] && MAX_BANDWIDTH=$BANDWIDTH_INT
                    [ $BANDWIDTH_INT -lt $MIN_BANDWIDTH ] && MIN_BANDWIDTH=$BANDWIDTH_INT
                  fi
                done < "$BANDWIDTH_RESULTS"
                
                if [ $COUNT -gt 0 ]; then
                  AVG_BANDWIDTH=$((TOTAL_BANDWIDTH / COUNT))
                  
                  echo "测试样本数: $COUNT"
                  echo "平均带宽: ${AVG_BANDWIDTH} Mbits/sec"
                  echo "最大带宽: ${MAX_BANDWIDTH} Mbits/sec"
                  echo "最小带宽: ${MIN_BANDWIDTH} Mbits/sec"
                  
                  # 带宽评估
                  if [ $AVG_BANDWIDTH -ge 1000 ]; then
                    echo "带宽评估: 优秀"
                  elif [ $AVG_BANDWIDTH -ge 500 ]; then
                    echo "带宽评估: 良好"
                  elif [ $AVG_BANDWIDTH -ge 100 ]; then
                    echo "带宽评估: 一般"
                  else
                    echo "带宽评估: 需要优化"
                  fi
                else
                  echo "无有效带宽数据"
                fi
              else
                echo "带宽测试无结果"
              fi
              
              echo "=== 网络带宽测试完成 ==="
        templateRef:
          name: kubectl-cmd
          template: kubectl-script
          clusterScope: true
        when: "'{{inputs.parameters.test-type}}' == 'bandwidth' || '{{inputs.parameters.test-type}}' == 'all'"